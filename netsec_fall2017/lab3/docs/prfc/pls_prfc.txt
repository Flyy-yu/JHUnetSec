


Network Working Group                                       P. Wang, Ed.
Request for Comments: 1                   JHU Network Security Fall 2017
Category: Standards Track                                  November 2017


                    Playground Request For Comments

Abstract

   This document specifies Playground Layer Security (PLS) protocol.
   The PLS protocol provides communication security over the Playground
   (Poly-Localized Algorithmic Yields Generated Remotely On Unused
   Network Devices).  The protocol allows client/server applications to
   communicate in a way that is designed to prevent eavesdropping,
   tampering, or message forgery.

Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (c) 2017 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions.




















Wang                         Standards Track                    [Page 1]

RFC 1                            PRFC's                    November 2017


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Requirements Terminology . . . . . . . . . . . . . . . . .  3
     1.2.  Goals  . . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Operation  . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Key Distribution . . . . . . . . . . . . . . . . . . . . .  4
     2.2.  Interfaces . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.3.  State Machine  . . . . . . . . . . . . . . . . . . . . . .  4
     2.4.  Error Handling . . . . . . . . . . . . . . . . . . . . . .  4
   3.  The PLS Record Protocol  . . . . . . . . . . . . . . . . . . .  5
     3.1.  Connection States  . . . . . . . . . . . . . . . . . . . .  5
     3.2.  Key Calculation  . . . . . . . . . . . . . . . . . . . . .  5
   4.  Public Key Infrastructure (PKI) for PLS  . . . . . . . . . . .  5
   5.  The PLS Handshake Protocol . . . . . . . . . . . . . . . . . .  6
     5.1.  Handshake Protocol Overview  . . . . . . . . . . . . . . .  6
     5.2.  Handshake Hello Messages . . . . . . . . . . . . . . . . .  6
     5.3.  Key Exchange Messages  . . . . . . . . . . . . . . . . . .  6
     5.4.  Handshake Done Messages  . . . . . . . . . . . . . . . . .  7
   6.  Implementation of PLS  . . . . . . . . . . . . . . . . . . . .  7
     6.1.  Packet Types . . . . . . . . . . . . . . . . . . . . . . .  7
     6.2.  State Machine  . . . . . . . . . . . . . . . . . . . . . .  7
     6.3.  PLS Handshake  . . . . . . . . . . . . . . . . . . . . . .  8
     6.4.  Data Transfer  . . . . . . . . . . . . . . . . . . . . . .  9
     6.5.  Connection Closing . . . . . . . . . . . . . . . . . . . .  9
     6.6.  Error Handling . . . . . . . . . . . . . . . . . . . . . .  9
   7.  Cryptographic Computations . . . . . . . . . . . . . . . . . . 10
     7.1.  RSA  . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     7.2.  AES AND CTR mode . . . . . . . . . . . . . . . . . . . . . 10
     7.3.  HMAC-SHA1 MAC  . . . . . . . . . . . . . . . . . . . . . . 10
     7.4.  Key Generation . . . . . . . . . . . . . . . . . . . . . . 10
   8.  Copyright Information  . . . . . . . . . . . . . . . . . . . . 11
   9.  Normative References . . . . . . . . . . . . . . . . . . . . . 11
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 11
   Intellectual Property and Copyright Statements . . . . . . . . . . 13
















Wang                         Standards Track                    [Page 2]

RFC 1                            PRFC's                    November 2017


1.  Introduction

   The primary goal of the PLS protocol is to provide privacy and data
   integrity between two communicating applications.

   The protocol is composed of two layers: the PLS Record Protocol and
   the PLS Handshake Protocol.  PLS Record Protocol provides connection
   security that has two basic properties: (1) The connection is
   private.  Symmetric cryptography, AES, is used for data encryption.
   The keys for this symmetric encryption are based on a secret
   negotiated while handshaking. (2) The connection is reliable.
   Message transport includes a message integrity check using a keyed
   MAC.  Secure hash function, SHA1, is used for MAC computations.

   PLS Handshake will perform before transport encrypted data.  PLS
   Handshake allows the server and client to authenticate each other and
   to negotiate cryptographic keys before the application protocol
   transmits or receives its first byte of data.  The PLS Handshake
   Protocol provides connection security that has three basic
   properties: (1) The peer's identity can be authenticated using
   asymmetric, or public key, cryptography, RSA.  And each peer has a
   certificate signed by CA to prove their identities. (2) The
   negotiation of a shared secret is secure: the negotiated secret is
   unavailable to eavesdroppers, and for any authenticated connection
   the secret cannot be obtained, even by an attacker who can place in
   the middle of the connection. (3) The negotiation is reliable: no
   attacker can modify the negotiation communication without being
   detected by parties to the communication.

   PLS is almost transparent to higher level, which is one of the
   advantages of PLS.

1.1.  Requirements Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Goals

   The goals of the PLS protocol, in order of priority, are as follows:

   1.Cryptographic security: PLS should be used to establish a secure
   connection between two parties.

   2.Interoperability: Independent programmers should be able to develop
   applications utilizing PLS that can successfully exchange
   cryptographic parameters without knowledge of one another's code.



Wang                         Standards Track                    [Page 3]

RFC 1                            PRFC's                    November 2017


   3.Relative efficiency: Cryptographic operations tend to be highly CPU
   intensive, particularly public key operation.  For this reason, the
   PLS protocol has incorporated an optional session caching scheme to
   reduce the number of connections that need to be established from
   scratch.  Additionally, care has been taken to reduce network
   activity.


2.  Operation

2.1.  Key Distribution

   The PLS protocol encrypts the transmitted data in AES algorithm.  As
   a symmetric encryption algorithm, both hosts have to share the same
   communication key for a connection.  Therefore, the PLS protocol MUST
   be able to generate and distribute a symmetric key to the opposite
   host.

   In this protocol, since we're on the basis of PEEP layer, we'll
   extract and use the RSA asymmetric key to encrypt and transmit the
   AES key.  Apart from the keys, counters (or Initial Vectors) MUST be
   sent together with the keys in order to realize AES CTR mode.

2.2.  Interfaces

   The PLS user interface provides calls to initial or close a
   connection, send or close messages for an open connection, and
   encrypt or decrypt data for transferring data.

2.3.  State Machine

   State machine defines different state and the required conditions
   between different state.  PLS state machine could describe the
   different state of server and client and the transition conditions
   between state.  Server and client have separate state during
   connection made, connection establishment, data transfer, connection
   close, which could more specifically describe how server or client
   could jump to next stage.  It is also easier to locate and classify
   error by checking the state.  In PLS protocol, Server and client both
   have 4 states.

2.4.  Error Handling

   In PLS protocol, the HMAC-SHA1 is used to ensure the integrity of
   packets or data.  HMAC is short for Keyed-Hashing for Message
   Authentication.  In PLS protocol, HMAC is a message authentication
   code obtained by running a SHA1 hash over data and a shared secret
   key.  SHA1 hash could help the receiver to ensure the data without



Wang                         Standards Track                    [Page 4]

RFC 1                            PRFC's                    November 2017


   alteration.  The shared secret key between two sides could ensure the
   confidentiality of data.


3.  The PLS Record Protocol

   The PLS Record Protocol is a layered protocol, which provides the
   confidentiality and integrity.  This protocol takes messages to be
   transmitted, fragments the data into manageable blocks, applies a
   MAC, encrypts, and transmits the result.  Received data is decrypted,
   verified, reassembled, and then delivered to higher-level clients.

3.1.  Connection States

   A PLS connection state is the operating environment of the PLS
   Protocol.  It specifies an encryption algorithm and a MAC algorithm.
   The encryption algorithm is to protect the integrity of the data
   while the MAC algorithm is to authenticate the data confidentiality.
   Logically, there are always four connection states outstanding:
   connection made, connection establishment, data transfer, and
   connection close.  The initial state always specifies no encryption
   or MAC will be used.

3.2.  Key Calculation

   The record layer will be used to generate the following six items:


               1: client MAC key
               2: server MAC key
               3: client encryption key
               4: server encryption key
               5: client IV
               6: server IV


   The PLS Handshake Protocol and Encryption data transfer use the PLS
   Record Protocol.  In the handshake protocol, RSA algorithm is to
   exchange the keys used for encryption in the data transfer.  In the
   data transfer, the key is used for encrypting the data transmitted in
   the AES algorithm.


4.  Public Key Infrastructure (PKI) for PLS

   PLS uses PKI to verify different parties identities.  Root CA is a
   trusted third party, which we assume it can be trusted.  Root CA will
   sign a certificate to intermediate CA, and intermediate CA will sign



Wang                         Standards Track                    [Page 5]

RFC 1                            PRFC's                    November 2017


   certificates to those parties in a group.  In the PLS Handshake
   phase, two parties will exchange their certificates.  Each side will
   check whether the certificate is signed by an intermediate CA, and
   whether the certificate of intermediate CA is signed by root CA.
   After verifying this trust chain, each side can know the identity of
   another side.  If one of these certificates is not valid, the trust
   cannot build and the connection will end.


5.  The PLS Handshake Protocol

   PLS Handshake Protocol is used to allow peers to agree upon security
   parameters for the record layer, to authenticate themselves, to
   instantiate negotiated security parameters, and to report error
   conditions to each other.

5.1.  Handshake Protocol Overview

   The cryptographic parameters of the session state are produced by the
   PLS Handshake, which operates on top of the PLS record layer.  The
   PLS Handshake protocol involves the following steps:

   1.  Exchange hello message which contains each peer's certificate and
   allows the client and server to authenticate themselves.

   2.  Exchange the necessary cryptographic parameters to allow the
   client and server to agree on a premaster secret.

   3.  Generate a master secret from the premaster secret.

   4.  Provide security parameters to the record layer.

   5.  Allow the client and server to verify that their peer has
   calculated the same security parameters and that the handshake
   occurred without tampering by an attacker.

5.2.  Handshake Hello Messages

   The hello phase messages are used to exchange each side's certificate
   and verify other's certificate.  This message contains a certificate
   and a random nonce.  The certificate is used to verify each side's
   identity.  If the verification failed, the connection will be ended.
   The nonce is used to prevent attacker replay a hello message.

5.3.  Key Exchange Messages

   In this phase, client and server will exchange an encrypted pre-key,
   a random number.  With this pre-key, both sides will share the same



Wang                         Standards Track                    [Page 6]

RFC 1                            PRFC's                    November 2017


   secret and they can generate keys based on this secret.  This pre-key
   is encrypted by other side's public key.  For this reason, only the
   one who owns the certificate can get the pre-key.

5.4.  Handshake Done Messages

   When the Handshake phase is going to end, each side MUST exchange the
   hash value of all those messages they sent and they got.  With
   changing this message, both sides can know the message they got is
   the message the other side sends.  And they can also know no message
   has been changed and they are on the same page of communication.  If
   the hash value is different, it means their messages have been
   tampered and the connection MUST be ended.


6.  Implementation of PLS

6.1.  Packet Types

   Implementation of PLS is based on 5 types of packets:

   PlsHello: Send from both server and client, the beginning of
   connection.

   PlskeyExchange: Send from both server and client, to exchange the
   prekeys of each other.

   PlsHandshakeDone: Send from both server and client, to establish the
   connection.

   PlsData: Send from both server and client, to transmit the data.

   PlsClose: Send from both server and client, to end the connection.

6.2.  State Machine

   On the client side, there are 4 different states.  When the state is
   set to 0, the client is inactive and waiting to send the PlsHello
   packet.  After sending the PlsHello packet to the server, the client
   will wait for the reply from the server.  When the client gets the
   PlsHello packet from the server, the client will validate the
   certificates of the server in the packets and extract 64 bits Ns
   which is random number and public key whose decryption key is only
   owned by the server.  Then the client will transfer its state to 1.
   The client sends server PlsKeyExchange packet to contain the PKc
   which is a pre-key and Ns+1, and wait for a reply from the server.
   When the client gets the PlsKeyExchange packet from the server, the
   client transfer its state to 2.  The state would be transmitted to 3,



Wang                         Standards Track                    [Page 7]

RFC 1                            PRFC's                    November 2017


   when the client sends PlsHandshakeDone and then receives and
   validates the PlsHandshakeDone packet from the server.

   PlsClose packet could be sent by the server and client.  When the
   client sends or receives PlsClose packet, then client close the
   connection and transfers its state to 0.

   On the server side, there are also 4 different states, In state 0,
   the server is inactive and waiting for the PlsHello packet from
   client side.  When server gets the PlsHello packet from the client,
   the server will validate the certificates of client in the packets
   and extract 64 bits Ns which is a random number and public key whose
   decryption key is only owned by client.  After sending back PlsHello
   packet to client, server transfer its state to 1.  The server
   receives and validates the PlsKeyExchange packet and send back
   PlsKeyExchange packet that contains its pre-key, then the server
   transfers its state to 2.  The server would calculate the hash of
   previous four messages, when the server receive the PlsHandshakeDone
   packet from the client, the server check the number in the packet
   match the result of calculation.  If match, the server will send back
   PlsHandshakeDone packet and transfer its state to 3.

   PlsClose packet could be sent by the server and client.  When the
   server sends or receives PlsClose packet, then server close the
   connection and transfer its state to 0.

6.3.  PLS Handshake

   PLS connection is established by a 6-step handshake.

   To ensure the security of handshake, PLS implement nonce validation,
   hash validation, asymmetric encryption and PKI principle in handshake
   between server and client.

   The client sends PlsHello packet to the server, which contains 64 bit
   Nc(client nonce), its certificates and C_public(public key from
   client) inside.  When the server receives the packetsand validate the
   identity of the client, the server sends back PlsHello packet.

   The client also needs to validate the identity of the server, then
   send a Key exchange message which contains Ns(server nonce)+1 and
   pre-key encrypted by S_public(public key from server).  The server
   check nonce number to ensure who it is talking to.  The pre-key being
   encrypted by public key from server ensure only the server has the
   key to decrypt it.  The server validates packet from client and
   replies PlsKeyExchange packet to client.  When the key exchange phase
   is done, the client and the server would send a handshake finished
   message to each other, which contains the hash of the previous four



Wang                         Standards Track                    [Page 8]

RFC 1                            PRFC's                    November 2017


   messages, two hello messages and two key exchange messages.  Check if
   the calculation hash and the number send from other side match, and
   ensure no party is replaced by the third party maliciously.  While
   the server and the client receive and validate handshake finished
   message from each other, the 6-step handshake is done.

6.4.  Data Transfer

   When handshake phrase is done, the client is going to send data to
   the server, or reverse.

   In Pls protocol, we use symmetric encryption AES to ensure the
   confidentiality of data and HMAC-SHA1 to ensure the integrity of
   data.  After the handshake phase, the server and the client share Nc
   Ns PKc(pre-key from client) and PKs(pre-key from server).  The client
   and the server use shared information to create 4 keys and two IVs.

   The client uses EKc as AES key and IVc as initial counter to encrypt
   data and use Eks and IVs to decrypt received data.

   The server uses EKs as AES key and IVs as initial counter to encrypt
   data and use Ekc and IVc to decrypt received data.

6.5.  Connection Closing

   Each side could close connection by sending PlsClose packet.  When
   each side sends out PlsClose packet, each side could shut down
   connection immediately, doesn't need to wait for reply from another
   side.  When each side receives the PlsClose packet, each side shuts
   down the connection immediately without response.

6.6.  Error Handling

   In PLS protocol, the server and the client share keys MKc and MKs
   both produced by the same algorithm on each side.  Each side creates
   HMAC-SHA1 MAC engine and verification engine.  In the client side,
   the MAC engine is configured with key MKc, the verification engine is
   configured with key MKs.  The encrypted data would be passed to MAC
   engine to produce verification code.  The encrypted data would be
   sent with the corresponding verification code.  Received data would
   be passed to verification engine to produce a verification code and
   check the code with the verification code send from another side.  If
   two codes match, it means the data is integral.  If two codes don't
   match, error happen.  The side catch error should send PlsClose
   packet with error message.  If other side receives error message, it
   must shut down the connection.





Wang                         Standards Track                    [Page 9]

RFC 1                            PRFC's                    November 2017


7.  Cryptographic Computations

7.1.  RSA

   For encryption of Client Pre-key and Server Pre-Key under the public
   key of server and client, respectively, we will be using RSA - 2048
   with OAEP padding.  The way to gensa -out <private-key-file-name>
   2048

7.2.  AES AND CTR mode

   The encryption method for PLS called Advanced Encryption Standard
   (AES).  AES is a specification for the encryption of electronic data
   established by the U.S. National Institute of Standards and
   Technology (NIST) in 2001.  Counter mode turns a block cipher into a
   stream cipher.  It generates the next keystream block by encrypting
   successive values of a "counter".The counter can be any function
   which produces a sequence which is guaranteed not to repeat for a
   long time.  The plaintext Xor with the encrypted counter will be our
   ciphertext.

7.3.  HMAC-SHA1 MAC

   The PLS uses a keyed Message Authentication Code (MAC) to protect
   message integrity.  The cipher suites defined in this document use a
   construction known as HMAC(keyed-hash message authentication code),
   which is based on SHA1 hash function.  For the client, the MAC engine
   is configured with key MKc.  The verification engine is configured
   with key MKs.  For the server, the keys are reversed between the two
   engines.

7.4.  Key Generation

   The Client needs to generate:


               1:EKc-Client Encryption Key
               2:EKs-Server Encryption Key
               4:MKc-Client MAC Key
               5:MKs-Server MAC Key


   The Server needs to generate the same four keys.  Each key is
   128bits.  Each side also has to generate an IVc ("Client encryption
   IV") and IVs ("Server encryption IV"), each also of size 128bits.  To
   derive each key, generate a stream using repeated SHA1 hashing of the
   seed "PLS1.0" + Nc + Ns + PKc + PKs.  Each hash generates 160 bits.




Wang                         Standards Track                   [Page 10]

RFC 1                            PRFC's                    November 2017


   block_0 = hash("PLS1.0"+Nc+Ns+PKc+PKs)

   block_1 = hash(block_0)

   block_2 = hash(block_1)

   block_3 = hash(block_2)

   block_4 = hash(block_3)

   Generating 5 blocks will generate 800 bits.  This 800 bits can be cut
   up to create the 768 bits of keys and IV's described above (with 32
   bits discarded).  This is the ordering of that derivation:


               1:EKc = first 128 bits
               2:EKs = second 128 bits
               3:IVc = third 128 bits
               4:IVs = fourth 128 bits
               5:MKc = 5th 128 bits
               6:MKs = 6th 128 bits



8.  Copyright Information

   The PLAYGROUND experiment is still new and has not yet developed a
   policy that has been reviewed by legal counsel.  However, at present,
   the following text MUST be used in the PRFC's.

   The copyright notice on the front page of the PRFC should read:
   "Copyright (c) 2017 SETH JAMES NIELSON.  All rights reserved.


9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2360]  Scott, G., "Guide for Internet Standards Writers", BCP 22,
              RFC 2360, DOI 10.17487/RFC2360, June 1998,
              <https://www.rfc-editor.org/info/rfc2360>.







Wang                         Standards Track                   [Page 11]

RFC 1                            PRFC's                    November 2017


Author's Address

   Peiyu Wang (editor)
   JHU Network Security Fall 2017
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone: +1 443-449-3230
   Email: zl@jhu.edu









































Wang                         Standards Track                   [Page 12]

RFC 1                            PRFC's                    November 2017


Full Copyright Statement

   Copyright (C) Seth James Nielson (2017).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Wang                         Standards Track                   [Page 13]

RFC 1                            PRFC's                    November 2017


   limitations associated with code donated to a PLAYGROUND experiment.


















































Wang                         Standards Track                   [Page 14]

